<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>目前的主要任务</title>
      <link href="/2023/09/05/20230905-mu-qian-de-zhu-yao-ren-wu/"/>
      <url>/2023/09/05/20230905-mu-qian-de-zhu-yao-ren-wu/</url>
      
        <content type="html"><![CDATA[<!-- tags 参考98，似水流年，情感，社会等等，教程，C++,Python,Java等等 --><p>看论文、论文综述、论文实验、论文初稿，完成毕业要求<br>学知识+刷题找实习，今年剩下四个月要有两个实习经历<br>明确未来方向！！！<br>读书+运动+恋爱和社交</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 似水流年 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章！</title>
      <link href="/2023/09/03/20230903-di-yi-pian-wen-zhang/"/>
      <url>/2023/09/03/20230903-di-yi-pian-wen-zhang/</url>
      
        <content type="html"><![CDATA[<!-- tags 参考98，似水流年，情感，社会等等，教程，C++,Python,Java等等 --><h1 id="开笔篇"><a href="#开笔篇" class="headerlink" title="开笔篇"></a>开笔篇</h1><p><img src="http://www.news.cn/politics/2023-09/03/1129842759_16937028538601n.jpeg" title="来源 http://www.news.cn/politics/2023-09/03/c_1129842759.htm"></p><p>今天是个特殊的日子，纪念中国人民抗日战争暨世界反法西斯战争胜利78周年！缅怀革命先烈！</p><p>开笔篇，摘抄《周恩来旅日日记》的一段话来自勉吧：</p><p>我平生最烦恧的是平常人立了志向不去行。我嫌他是多事。今天我也立志了，但是我这志是早定了。不过今天想的是这一年内进行的方针问题，既然比那铺张门面的话小，事情究比较着得亲切而易行了。<font color=red><strong>我先把它写出来，做个旧历元旦的开笔篇吧：第一，想要想比现在还新的思想；第二，做要做比现在最新的事情；第三，学要学离现在最近的学问。思想要自由，做事要实在，学问要真切。</strong></font></p><h1 id="Node-Hexo-GitHub-Gitee搭建个人博客教程"><a href="#Node-Hexo-GitHub-Gitee搭建个人博客教程" class="headerlink" title="Node+Hexo+GitHub&#x2F;Gitee搭建个人博客教程"></a>Node+Hexo+GitHub&#x2F;Gitee搭建个人博客教程</h1><blockquote><p>致谢此主题作者：<br><a href="https://blinkfox.github.io/">https://blinkfox.github.io/</a><br><a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p></blockquote><blockquote><p>参考：<br><a href="https://blog.csdn.net/weixin_42365530/article/details/107750003">https://blog.csdn.net/weixin_42365530&#x2F;article&#x2F;details&#x2F;107750003</a><br><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a><br><a href="https://zhuanlan.zhihu.com/p/120159632">https://zhuanlan.zhihu.com/p/120159632</a><br>官网，win7电脑需要查看一下，安装某些旧版本的包：<br><a href="https://www.npmjs.com/package/">https://www.npmjs.com/package/</a></p></blockquote><h2 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1. 安装git"></a>1. 安装git</h2><p>win7可以安装git的，并且git带了ssh、bash，注意git\usr\bin这个路径里才有ssh，配置环境变量<br>D:\SoftwareandTools\git\usr\bin;D:\SoftwareandTools\git\bin;（扯远了）</p><pre class="line-numbers language-none"><code class="language-none">配置:git config --global user.name &quot;xxx&quot;git config --global user.email &quot;xxx&quot;生成公钥：ssh-keygen -t rsa -C &quot;xx@xx&quot;进入 C:\Users\主机名\.ssh 目录，把 id_rsa.pub 里面的信息复制到GitHub的SSH公钥中即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-安装Node-js-Hexo"><a href="#2-安装Node-js-Hexo" class="headerlink" title="2. 安装Node.js+Hexo"></a>2. 安装Node.js+Hexo</h2><blockquote><p>介绍：<br><a href="https://zhuanlan.zhihu.com/p/627712011">https://zhuanlan.zhihu.com/p/627712011</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/Introduction">https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/Introduction</a><br>官网，注意下载zip文件！<br><a href="https://nodejs.org/en/download/releases">https://nodejs.org/en/download/releases</a></p></blockquote><h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><p>Hexo 是基于Node.js 的博客框架，就像 Java 要依赖 JDK 环境一样，所以要安装 Hexo 需要先安装 Node.js 。</p><blockquote><p>win7电脑的问题：</p><ul><li>高版本（node-v18.17.1-win-x64）会有问题：<br>ERROR A system error occurred: uv_os_gethostname returned ENOSYS (function not implemented)<br><a href="https://blog.csdn.net/fang_li_na/article/details/127537808">https://blog.csdn.net/fang_li_na/article/details/127537808</a><br>uv_os_gethostname 不支持win7，解决办法：安装旧版本node或者换系统吧<br>一些吐槽：<br><a href="https://www.cnblogs.com/c2soft/articles/17287664.html">https://www.cnblogs.com/c2soft/articles/17287664.html</a><br><a href="https://github.com/vuejs/core/discussions/6062">https://github.com/vuejs/core/discussions/6062</a><br><a href="https://github.com/libuv/libuv/issues/3260">https://github.com/libuv/libuv/issues/3260</a><br><a href="https://github.com/nodejs/node/issues/40353">https://github.com/nodejs/node/issues/40353</a></li><li>低版本（node-v12.22.12-win-x64）可以（同时Node.js高版本不支持win7），但要小心选择好各个重要包的版本。</li><li>最终我的版本：<br>E:\Desktop&gt;node -v<br>v12.22.12<br>E:\Desktop&gt;npm -v<br>6.14.16<br>E:\Desktop&gt;hexo -v<br>hexo-cli: 4.3.1</li></ul></blockquote><h3 id="配置node环境变量"><a href="#配置node环境变量" class="headerlink" title="配置node环境变量"></a>配置node环境变量</h3><pre class="line-numbers language-none"><code class="language-none">配置环境变量：注意名字叫NODE_PATH，值是：D:\SoftwareandTools\nodejs\node-v18.17.1-win-x64;然后加到系统环境变量的path里这样做意义有两个，一是能够命令行输入node，二是代表库安装位置设置成了这个位置下的node_modules（我这样的好处是之后安装cnpm等不需要再配置环境变量好像，所以没有按照网上设置node_global文件夹）这是命令行配置方式，也可以直接写文件&quot;C:\Users\Administrator\.npmrc&quot;npm config set prefix &quot;D:\SoftwareandTools\nodejs\node-v18.17.1-win-x64&quot;npm config set cache &quot;D:\SoftwareandTools\nodejs\node-v18.17.1-win-x64\node_cache&quot;  (需要新建文件夹node_cache)最终npm root -g 显示 D:\SoftwareandTools\nodejs\node-v18.17.1-win-x64\node_modules检查：node -vnpm -v 这里如果报错就需要在&quot;C:\Users\Administrator\.npmrc&quot;里重新设置：prefix&#x3D;D:\SoftwareandTools\nodejs\node-v12.22.12-win-x64cache&#x3D;D:\SoftwareandTools\nodejs\node-v12.22.12-win-x64\node_cache最终npm ls -g --depth&#x3D;0会显示安装的包:D:\SoftwareandTools\nodejs\node-v12.22.12-win-x64+-- cnpm@7.1.1+-- hexo-cli@4.3.1&#96;-- npm@6.14.16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装-cnpm"><a href="#安装-cnpm" class="headerlink" title="安装 cnpm"></a>安装 cnpm</h3><p>你懂的，比npm方便(注意我是低版本node，要安装旧版本的cnpm！<a href="https://zhuanlan.zhihu.com/p/120159632">https://zhuanlan.zhihu.com/p/120159632</a>)</p><pre class="line-numbers language-none"><code class="language-none">不指定版本会默认安装最新的，然后报错：npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.orgUnsupported engine for cnpm@9.2.0: wanted: &#123;&quot;node&quot;:&quot;&gt;&#x3D; 14.18.0&quot;&#125; (current: &#123;&quot;node&quot;:&quot;12.22.12&quot;,&quot;npm&quot;:&quot;6.14.16&quot;&#125;)我选择这个：https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;cnpm&#x2F;v&#x2F;7.1.1npm install cnpm@7.1.1 -g --registry&#x3D;https:&#x2F;&#x2F;registry.npmmirror.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><pre class="line-numbers language-none"><code class="language-none">cnpm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-Hexo使用"><a href="#3-Hexo使用" class="headerlink" title="3. Hexo使用"></a>3. Hexo使用</h2><pre class="line-numbers language-none"><code class="language-none">hexo -vhexo init blogcd blognpm install （如果必要的话，一般不用）hexo server （简写 hexo s）访问 http:&#x2F;&#x2F;localhost:4000&#x2F; 即可看到项目主要文件目录介绍：.├── .deploy       # 需要部署的文件├── node_modules  # 项目所有的依赖包和插件├── public        # 生成的静态网页文件├── scaffolds     # 文章模板├── source        # 博客正文和其他源文件等都应该放在这里|   ├── _drafts   # 草稿|   └── _posts    # 文章├── themes        # 主题├── _config.yml   # 全局配置文件└── package.json  # 项目依赖信息新建文章，也可以直接在_posts文件夹下创建md文件hexo new &quot;第一篇Hexo blog文章&quot;Hexo框架文章中的图片只支持外链的形式，有很多方法解决，比如，可以在码云或者七牛云部署一个自己的图床。？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-关联github和gitee"><a href="#4-关联github和gitee" class="headerlink" title="4. 关联github和gitee"></a>4. 关联github和gitee</h2><p>在gitee新建一个仓库，仓库名和路径必须是用户名！<br>在github新建一个仓库。仓库名一样必须是用户名！<br>添加自己电脑的公钥！</p><p>在项目根目录下安装git部署插件 之后就可以使用 hexo deploy（或简写 hexo d）将项目部署到远程仓库<br>win7安装之前在 <a href="https://www.npmjs.com/package/hexo-deployer-git?activeTab=readme">https://www.npmjs.com/package/hexo-deployer-git?activeTab=readme</a> 查查安装哪个旧版本！</p><pre class="line-numbers language-none"><code class="language-none">cnpm install hexo-deployer-git@3.0.0 --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改项目配置文件：_config.yml，在最下面，修改如下内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment  https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>summer<span class="token punctuation">-</span>I<span class="token punctuation">-</span>love<span class="token punctuation">-</span>NKU/summer<span class="token punctuation">-</span>I<span class="token punctuation">-</span>love<span class="token punctuation">-</span>NKU.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用命令 hexo d 将项目部署到 gitee 远程仓库，此时本地文件夹中出现有一个public文件夹。</p><p>github直接就能访问自己的网站了 <a href="https://summer-i-love-nku.github.io/">https://summer-i-love-nku.github.io/</a></p><p>gitee需要开启 Gitee Pages 静态网页托管服务（要先身份证、手持身份证的认证审核），每次重新上传代码到gitee时，都需要点击更新按钮重启page服务，比较麻烦。</p><h2 id="5-Hexo修改主题"><a href="#5-Hexo修改主题" class="headerlink" title="5. Hexo修改主题"></a>5. Hexo修改主题</h2><p>官网主题：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>可以去官网找自己喜欢的主题，下载下来，将里面的文件复制到自己项目的 theme 目录下</p><pre class="line-numbers language-none"><code class="language-none">修改根目录下的配置文件 _config.yml里：theme: xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动项目，访问：<a href="http://localhost:4000/">http://localhost:4000/</a> 先在本地查看主题是否修改成功</p><p><del>目前使用了 <a href="https://autoload.github.io/about/">https://autoload.github.io/about/</a></del><br>哦不我换成了这个！！！ <a href="https://blinkfox.github.io/">https://blinkfox.github.io/</a></p><pre class="line-numbers language-none"><code class="language-none"># 将修改后的项目部署到远程仓库# 生成静态网站文件hexo g  # 上传到远程仓库hexo d  # 1、清除 hexo 的缓存hexo clean# 2、采用一键部署hexo g --d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>_config.yml一些其他配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 如何上传README文件</span><span class="token comment"># _config.yml里针对特定文件让解释器跳过渲染（hexo g -d 命令会使.md 文件会被转化成 HTML 文件）</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> README.md<span class="token comment"># url</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//summer<span class="token punctuation">-</span>i<span class="token punctuation">-</span>love<span class="token punctuation">-</span>nku.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，Hexo + GitHub 部署自己的个人博客完成！</p><h2 id="6-其他完善"><a href="#6-其他完善" class="headerlink" title="6. 其他完善"></a>6. 其他完善</h2><h3 id="新增功能"><a href="#新增功能" class="headerlink" title="新增功能"></a>新增功能</h3><p>参考 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p><ul><li><p>开辟各个板块<br>也可以自己增加板块，二级板块</p></li><li><p>代码问题解决</p><pre class="line-numbers language-none"><code class="language-none">cnpm uninstall hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>搜索</p><pre class="line-numbers language-none"><code class="language-none">cnpm install hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>中文链接转拼音</p><pre class="line-numbers language-none"><code class="language-none">cnpm i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>文章字数统计插件</p><pre class="line-numbers language-none"><code class="language-none">cnpm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="Hexo-删除git历史记录"><a href="#Hexo-删除git历史记录" class="headerlink" title="Hexo 删除git历史记录"></a>Hexo 删除git历史记录</h3><pre class="line-numbers language-none"><code class="language-none">由于github给的pages免费空间只有300M？将 .deply_git 文件备份以免意外情况发生（可以直接先移出去）删除 .deploy_git 和 public 文件进入blog 路径依次执行： hexo clean hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录：学习node和npm"><a href="#附录：学习node和npm" class="headerlink" title="附录：学习node和npm"></a>附录：学习node和npm</h2><blockquote><p>学习一些命令：<br><a href="https://docs.npmjs.com/cli/v6/commands">https://docs.npmjs.com/cli/v6/commands</a><br>查看需要安装哪个版本：<br><a href="https://www.npmjs.com/package/">https://www.npmjs.com/package/</a></p></blockquote><pre class="line-numbers language-none"><code class="language-none">npm install xxx：安装项目到项目目录下，不会将模块依赖写入devDependencies或dependencies。npm install -g xxx:-g的意思是将模块安装到全局，不是安装到当前目录的项目下npm install -save xxx:--save 等同于-S （常用，可保存在package.json文件中），-S, --save 安装包信息将加入到dependencies（生产阶段的依赖,也就是项目运行时的依赖，就是程序上线后仍然需要依赖）npm install -save-dev xxx:--save-dev 等同于 -D，-D, --save-dev 安装包信息将加入到devDependencies（开发阶段的依赖，就是我们在开发过程中需要的依赖，只在开发阶段起作用。）显示安装的包npm list -gnpm ls --depth&#x3D;0 -g注意安装和卸载，npm uninstall -g xxx查看服务器可安装的包的版本npm view cnpm versions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Hexo-Gitlab搭建步骤"><a href="#Hexo-Gitlab搭建步骤" class="headerlink" title="Hexo+Gitlab搭建步骤"></a>Hexo+Gitlab搭建步骤</h1><blockquote><p>参考：<br>主要教程 <a href="https://blog.csdn.net/hubojing/article/details/125237882">https://blog.csdn.net/hubojing/article/details/125237882</a><br>示例，但没什么帮助 <a href="https://gitlab.com/pages/hexo">https://gitlab.com/pages/hexo</a><br>runner <a href="https://docs.gitlab.com/runner/register/index.html">https://docs.gitlab.com/runner/register/index.html</a><br>一个奇怪问题解决 <a href="https://stackoverflow.com/questions/53370840/this-job-is-stuck-because-the-project-doesnt-have-any-runners-online-assigned">https://stackoverflow.com/questions/53370840/this-job-is-stuck-because-the-project-doesnt-have-any-runners-online-assigned</a></p></blockquote><p>注册gitlab似乎要FQ才能顺利注册，不然可能要验证手机号，但页面里没有中国的手机号。<br>因为我用github注册有问题，我直接用了新的邮箱注册。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>按照<a href="https://blog.csdn.net/hubojing/article/details/125237882">教程</a>  ，先创建仓库：用户名.gitlab.io，记得在settings-Repository-Protected branches打开允许强制推送，方便之后操作！</p><ol><li><p>先在CI&#x2F;CD Settings 关闭共享的runner，创建一个runner，才能获得token</p></li><li><p>然后按照指示 <a href="https://docs.gitlab.com/runner/install/windows.html">https://docs.gitlab.com/runner/install/windows.html</a>  下载exe文件 （Download the binary for 64-bit）</p></li><li><p>然后新建一个gitlab-runner文件夹存放exe文件(最好不要放项目里)，在命令行执行这个：<br>E:\Desktop&gt;gitlab-runner-windows-amd64   register<br>输入url（<a href="https://gitlab.com)和token(刚刚获取的),name随便起,executor选择shell/">https://gitlab.com）和token（刚刚获取的），name随便起，executor选择shell</a></p></li><li><p>最后执行 gitlab-runner-windows-amd64 run<br>看到Project runners绿色就ok了<br>（可以点进去设置一下，勾选这两项，防止出现<a href="https://stackoverflow.com/questions/53370840/this-job-is-stuck-because-the-project-doesnt-have-any-runners-online-assigned">这个问题</a>）<br>Active                 Paused runners don’t accept new jobs<br>Run untagged jobs      Indicates whether this runner can pick jobs without tags</p></li><li><p>在项目中增加.gitlab-ci.yml文件！</p><pre class="line-numbers language-none"><code class="language-none">image: node:12.22.12cache:  paths:    - node_modules&#x2F;before_script:  - npm install hexo-cli -g  - npm install  - npm uninstall hexo-prism-plugin  - npm install hexo-generator-search --save  - npm i hexo-permalink-pinyin --save  - npm i --save hexo-wordcount  - hexo generatepages:  script:    - hexo generate  artifacts:    paths:      - public  rules:    - if: $CI_COMMIT_BRANCH &#x3D;&#x3D; $CI_DEFAULT_BRANCH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>之后把源文件上传到gitlab</p></li></ol><pre class="line-numbers language-none"><code class="language-none">这些文件_config.yml  node_modules(不需要上传，本地调试使用，加入gitignore)  package-lock.json  source  db.json      package.json  scaffolds          themes    .gitignore  .git注意.gitignore不要写这仨文件：db.jsonpackage.jsonpackage-lock.jsongit initgit remote add origin https:&#x2F;&#x2F;gitlab.com&#x2F;I_love_nk&#x2F;i_love_nk.gitlab.io.git# 先不写这个 git branch -m maingit add .git commit -m &quot;更新&quot;git push -uf origin main会报错 error: src refspec main does not match any执行 git branch -m master main ，再提交git push -uf origin main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>可能遇到问题，还要本地启动runner</li></ol><pre class="line-numbers language-none"><code class="language-none">查看build-jobs：This job is in pending state and is waiting to be picked by a runner本地运行:E:\Desktop\blog\gitlab-runner&gt;gitlab-runner-windows-amd64 run好了，running了！！！反正弄了好多遍build的pipeline和job，终于最后本地已启动就好了写文章后更新流程：git add .git commit -m &quot;更新&quot;git push -uf origin main进入gitlab-runner文件夹：cd ..&#x2F;*ergitlab-runner-windows-amd64.exe run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><ol><li></li></ol><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;blog.csdn.net&#x2F;gongdamrgao&#x2F;article&#x2F;details&#x2F;115032436关于git的问题：error: src refspec main does not match any执行git branch -m master main，可以看到master已经被成功改为main了，如此，我们继续push就不会有什么问题了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li></li></ol><pre class="line-numbers language-none"><code class="language-none">ERROR: Job failed (system failure): prepare environment: failed to start process: exec: “pwsh”: executable file not found in %PATH%.打开config.toml文件，shell &#x3D; &quot;pwsh&quot;改为：shell &#x3D; &quot;powershell&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gitlab还是不方便"><a href="#gitlab还是不方便" class="headerlink" title="gitlab还是不方便"></a>gitlab还是不方便</h2><p>每次都要将文件push到gitlab，然后手动运行gitlab-runner文件夹下的gitlab-runner-windows-amd64 run命令，不然他会一直pending：</p><pre class="line-numbers language-none"><code class="language-none">This job has not started yetThis job is in pending state and is waiting to be picked by a runner<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（或许这个问题解决了就好一点了）</p><p>且这自动构建也是要使用本地环境吗？<br><a href="https://docs.gitlab.com/ee/ci/">https://docs.gitlab.com/ee/ci/</a><br><a href="https://zhuanlan.zhihu.com/p/184936276">https://zhuanlan.zhihu.com/p/184936276</a><br>gitlab-runner文件夹下生成builds和cache文件夹，占用空间很大，里面会有：</p><pre class="line-numbers language-none"><code class="language-none">E:\Desktop\blog\gitlab-runner\builds\GJAx2yz9x\0\I_love_nk\i_love_nk.gitlab.io&gt;ls  -a.               _config.yml   package-lock.json  source..              db.json       public             themes.git            node_modules  README.md.gitlab-ci.yml  package.json  scaffolds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而github是真的方便，写完文章，直接本地hexo g -d就行，只是项目里有node_modules（各种包）和.deploy_git、public（上传到github的html文件）文件夹占空间。<br>最终我还是用github吧！</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> npm </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
            <tag> Gitee </tag>
            
            <tag> 教程 </tag>
            
            <tag> 似水流年 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
